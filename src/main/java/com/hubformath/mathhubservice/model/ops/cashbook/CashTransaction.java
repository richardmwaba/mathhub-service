package com.hubformath.mathhubservice.model.ops.cashbook;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.hubformath.mathhubservice.model.auth.User;
import com.hubformath.mathhubservice.model.systemconfig.CashTransactionCategory;
import com.hubformath.mathhubservice.model.systemconfig.PaymentMethod;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;

import java.time.LocalDateTime;
import java.util.Objects;

@Entity
@Table(name = "cash_transactions")
@SuppressWarnings("DefaultAnnotationParam") // Columns generated by @JoinColumn are unique by default
public class CashTransaction {
    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    private String cashTransactionId;

    @Column(name = "transaction_number", unique = true)
    private String transactionNumber;

    @ManyToOne
    @JoinColumn(name = "payment_method_id", unique = false, nullable = false)
    private PaymentMethod paymentMethod;

    @Enumerated(EnumType.STRING)
    @Column(name = "transaction_type")
    private CashTransactionType transactionType;

    @ManyToOne
    @JoinColumn(name = "transaction_category_id", unique = false, nullable = false)
    private CashTransactionCategory transactionCategory;

    @Column(name = "narration")
    private String narration;

    @Column(name = "amount")
    private Double amount;

    @Column(name = "transaction_date_time")
    private LocalDateTime transactionDateTime;

    @ManyToOne
    @JoinColumn(name = "transacted_by", unique = false, nullable = false)
    private User transactedBy;

    @CreationTimestamp
    @Column(name = "created_at", updatable = false)
    @JsonIgnore
    private LocalDateTime createdAt;

    @UpdateTimestamp
    @Column(name = "updated_at")
    @JsonIgnore
    private LocalDateTime updatedAt;

    public CashTransaction(String transactionNumber,
                           PaymentMethod paymentMethod,
                           CashTransactionType transactionType,
                           String narration,
                           Double amount) {
        this.paymentMethod = paymentMethod;
        this.transactionNumber = transactionNumber;
        this.transactionType = transactionType;
        this.narration = narration;
        this.amount = amount;
        this.transactionDateTime = LocalDateTime.now();
    }

    @SuppressWarnings("unused")
    public CashTransaction() {
    }

    public String getCashTransactionId() {
        return cashTransactionId;
    }

    public void setCashTransactionId(String cashTransactionId) {
        this.cashTransactionId = cashTransactionId;
    }

    public String getTransactionNumber() {
        return transactionNumber;
    }

    public void setTransactionNumber(String transactionNumber) {
        this.transactionNumber = transactionNumber;
    }

    public PaymentMethod getPaymentMethod() {
        return paymentMethod;
    }

    public void setPaymentMethod(PaymentMethod paymentMethod) {
        this.paymentMethod = paymentMethod;
    }

    public CashTransactionType getTransactionType() {
        return transactionType;
    }

    public void setTransactionType(CashTransactionType transactionType) {
        this.transactionType = transactionType;
    }

    public CashTransactionCategory getTransactionCategory() {
        return transactionCategory;
    }

    public void setTransactionCategory(CashTransactionCategory transactionCategory) {
        this.transactionCategory = transactionCategory;
    }

    public String getNarration() {
        return narration;
    }

    public void setNarration(String narration) {
        this.narration = narration;
    }

    public Double getAmount() {
        return amount;
    }

    public void setAmount(Double amount) {
        this.amount = amount;
    }

    public LocalDateTime getTransactionDateTime() {
        return transactionDateTime;
    }

    public void setTransactionDateTime(LocalDateTime transactionDateTime) {
        this.transactionDateTime = transactionDateTime;
    }

    public User getTransactedBy() {
        return transactedBy;
    }

    public void setTransactedBy(User transactedBy) {
        this.transactedBy = transactedBy;
    }

    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }

    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CashTransaction that)) return false;
        return Objects.equals(getCashTransactionId(), that.getCashTransactionId())
                && Objects.equals(getTransactionNumber(), that.getTransactionNumber())
                && Objects.equals(getPaymentMethod(), that.getPaymentMethod())
                && getTransactionType() == that.getTransactionType()
                && Objects.equals(getTransactionCategory(), that.getTransactionCategory())
                && Objects.equals(getNarration(), that.getNarration())
                && Objects.equals(getAmount(), that.getAmount())
                && Objects.equals(getTransactionDateTime(), that.getTransactionDateTime())
                && Objects.equals(getTransactedBy(), that.getTransactedBy());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getCashTransactionId(),
                            getTransactionNumber(),
                            getPaymentMethod(),
                            getTransactionType(),
                            getTransactionCategory(),
                            getNarration(),
                            getAmount(),
                            getTransactionDateTime(),
                            getTransactedBy());
    }

    @Override
    public String toString() {
        return "CashTransaction{" +
                "cashTransactionId='" + cashTransactionId + '\'' +
                ", transactionNumber='" + transactionNumber + '\'' +
                ", paymentMethod=" + paymentMethod +
                ", transactionType=" + transactionType +
                ", transactionCategory=" + transactionCategory +
                ", narration='" + narration + '\'' +
                ", amount=" + amount +
                ", transactionDateTime=" + transactionDateTime +
                ", transactedBy=" + transactedBy +
                '}';
    }
}