package com.hubformath.mathhubservice.model.sis;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.hubformath.mathhubservice.model.auth.User;
import com.hubformath.mathhubservice.model.systemconfig.ExamBoard;
import com.hubformath.mathhubservice.model.systemconfig.Grade;
import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.JoinTable;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToMany;
import jakarta.persistence.OneToOne;
import jakarta.persistence.Table;
import jakarta.persistence.Transient;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;
import org.springframework.data.annotation.ReadOnlyProperty;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Objects;

@Entity
@Table(name = "students")
@SuppressWarnings("DefaultAnnotationParam") // Columns generated by @JoinColumn are unique by default
public class Student {
    @Id
    @ReadOnlyProperty
    @GeneratedValue(strategy = GenerationType.UUID)
    @Column(name = "id")
    private String id;

    @Column(name = "first_name")
    private String firstName;

    @Column(name = "middle_name")
    private String middleName;

    @Column(name = "last_name")
    private String lastName;

    @Enumerated(EnumType.STRING)
    @Column(name = "gender")
    private Gender gender;

    @OneToMany(cascade = CascadeType.ALL)
    @JoinTable(name = "students_parents",
            joinColumns = @JoinColumn(name = "student_id"),
            inverseJoinColumns = @JoinColumn(name = "parent_id"))
    private List<Parent> parents;

    @ManyToOne
    @JoinColumn(name = "grade_id", unique = false)
    private Grade grade;

    @OneToMany(cascade = CascadeType.ALL)
    @JoinTable(name = "students_classes",
            joinColumns = @JoinColumn(name = "student_id"),
            inverseJoinColumns = @JoinColumn(name = "class_id"))
    private List<Class> classes;

    private String email;

    @OneToOne(cascade = CascadeType.ALL)
    @JoinColumn(name = "user_id")
    @JsonIgnore
    private User user;

    @ManyToOne(cascade = CascadeType.ALL)
    @JoinColumn(name = "address_id", unique = false)
    private Address address;

    @ManyToOne
    @JoinColumn(name = "examBoard_id", unique = false)
    private ExamBoard examBoard;

    @Transient
    private PhoneNumber phoneNumber;

    @Transient
    private StudentFinancialSummary financialSummary;

    @Column(name = "date_of_birth")
    private LocalDate dateOfBirth;

    @CreationTimestamp
    @ReadOnlyProperty
    @JsonIgnore
    @Column(name = "created_at")
    private LocalDateTime createdAt;

    @UpdateTimestamp
    @ReadOnlyProperty
    @JsonIgnore
    @Column(name = "updated_at")
    private LocalDateTime updatedAt;

    @SuppressWarnings("unused")
    public Student() {
        // Used by hibernate instantiation
    }

    public Student(String firstName,
                   String middleName,
                   String lastName,
                   String email,
                   Gender gender,
                   User user) {
        this.firstName = firstName;
        this.lastName = lastName;
        this.middleName = middleName;
        this.email = email;
        this.gender = gender;
        this.user = user;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getMiddleName() {
        return middleName;
    }

    public void setMiddleName(String middleName) {
        this.middleName = middleName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public Gender getGender() {
        return gender;
    }

    public void setGender(Gender gender) {
        this.gender = gender;
    }

    public Grade getGrade() {
        return grade;
    }

    public void setGrade(Grade grade) {
        this.grade = grade;
    }

    public List<Class> getClasses() {
        return classes;
    }

    public void setClasses(List<Class> aClasses) {
        this.classes = aClasses;
    }

    public List<Parent> getParents() {
        return parents;
    }

    public void setParents(List<Parent> parents) {
        this.parents = parents;
    }

    public Address getAddress() {
        return address;
    }

    public void setAddress(Address address) {
        this.address = address;
    }

    public PhoneNumber getPhoneNumber() {
        return user.getPhoneNumber();
    }

    public void setPhoneNumber(PhoneNumber phoneNumber) {
        this.phoneNumber = phoneNumber;
    }

    public StudentFinancialSummary getFinancialSummary() {
        return financialSummary;
    }

    public void setFinancialSummary(StudentFinancialSummary financialSummary) {
        this.financialSummary = financialSummary;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public User getUser() {
        return user;
    }

    public void setUser(User user) {
        this.user = user;
    }

    public LocalDate getDateOfBirth() {
        return dateOfBirth;
    }

    public void setDateOfBirth(LocalDate dateOfBirth) {
        this.dateOfBirth = dateOfBirth;
    }

    public ExamBoard getExamBoard() {
        return examBoard;
    }

    public void setExamBoard(ExamBoard examBoard) {
        this.examBoard = examBoard;
    }

    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }

    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Student student)) return false;
        return getId().equals(student.getId())
                && getFirstName().equals(student.getFirstName())
                && getMiddleName().equals(student.getMiddleName())
                && getLastName().equals(student.getLastName())
                && getGender().equals(student.getGender())
                && getParents().equals(student.getParents())
                && getGrade().equals(student.getGrade())
                && getClasses().equals(student.getClasses())
                && getEmail().equals(student.getEmail())
                && getUser().equals(student.getUser())
                && getAddress().equals(student.getAddress())
                && getExamBoard().equals(student.getExamBoard())
                && getPhoneNumber().equals(student.getPhoneNumber())
                && getFinancialSummary().equals(student.getFinancialSummary())
                && getDateOfBirth().equals(student.getDateOfBirth());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId(),
                            getFirstName(),
                            getMiddleName(),
                            getLastName(),
                            getGender(),
                            getParents(),
                            getGrade(),
                            getClasses(),
                            getEmail(),
                            getUser(),
                            getAddress(),
                            getExamBoard(),
                            getPhoneNumber(),
                            getFinancialSummary(),
                            getDateOfBirth());
    }

    @Override
    public String toString() {
        return "Student{" +
                "id='" + id + '\'' +
                ", firstName='" + firstName + '\'' +
                ", middleName='" + middleName + '\'' +
                ", lastName='" + lastName + '\'' +
                ", gender=" + gender +
                ", parents=" + parents +
                ", grade=" + grade +
                ", classes=" + classes +
                ", email='" + email + '\'' +
                ", user='" + user + '\'' +
                ", address=" + address +
                ", examBoard=" + examBoard +
                ", phoneNumber=" + phoneNumber +
                ", financialSummary=" + financialSummary +
                ", dateOfBirth=" + dateOfBirth +
                '}';
    }
}
